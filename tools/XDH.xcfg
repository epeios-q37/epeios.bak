<?xml version="1.0" encoding="UTF-8"?>
<!-- For tools which deal with XDHTML interfaces -->
<xpp:bloc xmlns:xpp="http://q37.info/ns/xpp">
	<Definitions>
		<CustomItems>
			<AttributeNames>
				<Widget>data-xdh-widget</Widget>
				<Result>data-xdh-result</Result>
			</AttributeNames>
		</CustomItems>
        <Scripts>
			<!-- All scripts enclosed in following block are of intenal use.-->
			<xpp:bloc>
				<Script name="SetEventHandlers_1" Arguments="#Ids,#Events">
					<![CDATA[ {
						setEventHandlers( %#Ids%, %#Events% );
					} ]]>
				</Script>
				<Script name="InstantiateWidgets_1" Arguments="#Ids,#Types,#ParametersSets,#ContentRetrievingMethods,#FocusingMethods,#SelectionMethods">
					<![CDATA[ {
						instantiateWidgets( %#Ids%, %#Types%, %#ParametersSets%, %#ContentRetrievingMethods%, %#FocusingMethods%, %#SelectionMethods% );
					} ]]>
				</Script>
			</xpp:bloc>
			<!-- All scripts enclosed in following block are public.-->
			<xpp:bloc>
				<Script name="Execute_1" Arguments="#Script">
					<![CDATA[ {
						%#Script%
					} ]]>
				</Script>
				<Script name="Alert_1" Arguments="Message">
					<![CDATA[ {
						alert("%Message%");
					} ]]>
				</Script>
				<Script name="Confirm_1" Arguments="Message">
					<![CDATA[ {
						if ( window.confirm("%Message%") )
							"true";
						else
							"false";
					} ]]>
				</Script>
				<Script name="HandleLayout_1" Arguments="Variant,Id,XML,XSL">
					<![CDATA[ {
						let xml = "%XML%";
						let xsl = "%XSL%";
						let id = "%Id%";
						
						switch ( "%Variant%" ) {
						case 'Prepend':
							prependLayout(id, xml, xsl);
							break;
						case 'Set':
							setLayout(id, xml, xsl);
							break;
						case 'Append':
							appendLayout(id, xml, xsl);
							break;
						}

						var digests = "(" + fetchEventHandlers(id) + ")|(" + fetchWidgets(id) + ")";
						digests;  // Not returned to user. Splitted and given after processing to 'SetEnventHandlers_1' and  InstantiateWidgets_1' above internal scripts.
					} ]]>
				</Script>
				<Script name="GetContents_1" Arguments="#Ids">
					<![CDATA[ {
						getContents(%#Ids%);
					} ]]>
				</Script>
				<Script name="SetContents_1" Arguments="#Ids,#Contents">
					<![CDATA[ {
						setContents( %#Ids%, %#Contents% );
					} ]]>
				</Script>
				<Script name="SetTimeout_1" Arguments="Delay,Action">
					<![CDATA[ {
						setTimeout( (digest) => launchEvent(digest), %Delay%, "|TIMEOUT|timeout||((%Action%))" );
					} ]]>
				</Script>
				<Script name="HandleClasses_1" Arguments="Variant,#Ids,#Classes">
					<![CDATA[ {
						console.log("%Variant%");
						switch ( "%Variant%" ) {
						case 'Add':
							addClasses(%#Ids%, %#Classes%);
							break;
						case 'Remove':
							removeClasses(%#Ids%, %#Classes%);
							break;
						case 'Toggle':
							console.log("Yo", %#Ids%, %#Classes%);
							toggleClasses(%#Ids%, %#Classes%);
							break;
						}
					} ]]>
				</Script>
				<Script name="EnableElements_1" Arguments="#Ids">
					<![CDATA[ {
						enableElements( %#Ids% );
					} ]]>
				</Script>
				<Script name="DisableElements_1" Arguments="#Ids">
					<![CDATA[ {
						disableElements( %#Ids% );
					} ]]>
				</Script>
				<Script name="SetAttribute_1" Arguments="Id,Name,Value">
					<![CDATA[ {
						getElement( "%Id%" ).setAttribute("%Name%", "%Value%");
					} ]]>
				</Script>
				<Script name="GetAttribute_1" Arguments="Id,Name">
					<![CDATA[ {
						getElement( "%Id%" ).getAttribute("%Name%");
					} ]]>
				</Script>
				<Script name="RemoveAttribute_1" Arguments="Id,Name">
					<![CDATA[ {
						getElement( "%Id%" ).removeAttribute( "%Name%" );
					} ]]>
				</Script>
				<Script name="SetProperty_1" Arguments="Id,#Name,#Value">
					<![CDATA[ {
						getElement( "%Id%" ).%#Name% = %#Value%;
					} ]]>
				</Script>
				<Script name="GetProperty_1" Arguments="Id,#Name">
					<![CDATA[ {
						getElement( "%Id%" ).%#Name%;
					} ]]>
				</Script>
				<Script name="Parent_1" Arguments="Id">
					<![CDATA[ {
						getOrGenerateId( getElement( "%Id% ).parentElement );
					} ]]>
				</Script>
				<Script name="Focus_1" Arguments="Id">
					<![CDATA[ {
						getElement( "%Id%" ).focus();
					} ]]>
				</Script>
				<Script name="" Arguments="">
					<![CDATA[ {

					} ]]>
				</Script>
			</xpp:bloc>
        </Scripts>
		<OldScripts>
			<Parent>
				<![CDATA[
					getOrGenerateId( getElement( "%Id% ).parentElement );
				]]>
			</Parent>
			<CreateElement>
				<![CDATA[
					let id = "%Id%";
					let node = document.createElement( "%Name%" );
					if ( id !== "" )
						node.id = id;
					document.head.appendChild( node );	// 'node' had to be inserted in the DOM, or subsequent 'document.getElementById()' will not find it !
					getOrGenerateId( node );
				]]>
			</CreateElement>
      <Layout>
        <Prepend>
          <![CDATA[
					{
						let xml = "%XML%";
						let xsl = "%XSL%";
						let id = "%Id%";
						prependLayout(id, xml, xsl);

						var digests = fetchEventHandlers( id );
						digests;
						}
					]]>
        </Prepend>
        <Set>
          <![CDATA[
					{
						let xml = "%XML%";
						let xsl = "%XSL%";
						let id = "%Id%";
						setLayout(id, xml, xsl);

						var digests = fetchEventHandlers( id );
						digests;
						}
					]]>
        </Set>
        <Append>
          <![CDATA[
					{
						let xml = "%XML%";
						let xsl = "%XSL%";
						let id = "%Id%";
						appendLayout(id, xml, xsl);

						var digests = fetchEventHandlers( id );
						digests;
						}
					]]>
        </Append>
      </Layout>
      <Child>
				<Insert>
					<![CDATA[
					 let node = getElement( "%Id%" );
					 node.insertBefore( getElement( "%Child%" ), node.firstChild );
					]]>
				</Insert>
				<Append>
					<![CDATA[
					 getElement( "%Id%" ).appendChild( getElement( "%Child% ) );
					]]>
				</Append>
				<First>
					<![CDATA[
						getOrGenerateId( getElement( "%Id%" ).firstChild );
					]]>
				</First>
				<Last>
					<![CDATA[
						getOrGenerateId( getElement( "%Id%" ).lastChild );
					]]>
				</Last>
			</Child>
			<Sibling>
				<Previous>
					<![CDATA[
						getOrGenerateId( getElement( "%Id%" ).previousSibling );
					]]>
				</Previous>
				<Next>
					<![CDATA[
						getOrGenerateId( getElement( "%Id%" ).nextSibling );
					]]>
				</Next>
			</Sibling>
			<Insert>
				<Before>
					<![CDATA[
						let node = getElement( "%Id%" );
					 node.parentElement.insertBefore( getElement( "%Sibling%"), node );
					]]>
				</Before>
				<After>
					<![CDATA[
						let node = getElement( "%Id%" );
						node.parentElement.insertBefore( getElement( "%Sibling%"), node.nextSibling );
					]]>
				</After>
			</Insert>
			<Attribute>
				<Getter>
					<![CDATA[
							getElement( "%Id%" ).getAttribute("%Name%");
						]]>
				</Getter>
				<Remover>
					<![CDATA[
							getElement( "%Id%" ).removeAttribute( "%Name%" );
						]]>
				</Remover>
				<Setter>
					<![CDATA[
							getElement( "%Id%" ).setAttribute("%Name%", "%Value%");
						]]>
				</Setter>
			</Attribute>
			<Value>
				<Getter>
					<![CDATA[
							var result = getValue( "%Id%" );
//							console.log( "XDH: ", result );
							result;
						]]>
				</Getter>
				<Setter>
					<![CDATA[
							setValue( "%Id%", "%Value%" );
						]]>
				</Setter>
			</Value>
			<Dialog>
				<Alert>
					<![CDATA[
						dia = document.createElement( "span" );
						dia.innerHTML = transformToHTML( "%XML%", "%XSL%" );
						jQuery(dia).dialog({modal: true},{title: "%Title%"},{width: "auto"} ,{closeText: "%CloseText%"});
					]]>
				</Alert>
				<!-- Ugly. Will try to solve problem with the below alternative. -->
				<Confirm>
					<![CDATA[
							confirm( transformToText( "%XML%", "%XSL%" ).trim() );
					]]>
				</Confirm>
				<!--
						Below version doesn't work as is because of JS asynchronicity,
						and the fact that the UI is refreshed only when the returning from event handler !
					-->
				<!--<Confirm>
						<![CDATA[
						var response;
						( function ()
						{
							var defer = $.Deferred();
							$.Zebra_Dialog(
								transformToHTML( "%XML%", "%XSL%" ),
								{
									type: 'question',
									'onClose': function(caption) { defer.resolve( caption ); },
									position: ['left','top'],
								}
							);
							return defer.promise();
						})().then( function (answer) {
								unlock( answer );
						} );
						]]>
					</Confirm>-->
			</Dialog>
			<!--<DraggableSetter>
				<![CDATA[
					var element = getElement( "%Id%" );
					element.setAttribute( "draggable", "true" );
					jQuery( element ).draggable(
						{
							drag: function( event, ui )
							{
								log( "Drag" );
								if ( !drag ) {
								log( "!!!!" );
								var event = document.createEvent( "HTMLEvents" );
								event.initEvent("dragstart" );
								getElement( "%Id%" ).dispatchEvent( event );
								drag = true;
								}
							}
						}
					);
				]]>
			</DraggableSetter>
			<DroppableSetter>
				<![CDATA[
					var element = getElement( "%Id%" );
					element.setAttribute( "ondragover", "event.preventDefault();" );
					jQuery( element ).droppable(
						{
							drop: function( event, ui )
							{
								log( "Drop" );
								var event = document.createEvent( "HTMLEvents" );
								event.initEvent("drop" );
								getElement( "%Id%" ).dispatchEvent( event );
								drag = false;
							}
						}
					);
				]]>
			</DroppableSetter>-->
			<DraggableSetter>
				<![CDATA[
				var element = getElement( "%Id%" );
//				element.setAttribute( "draggable", "true" );
				if ( false )
					interact( element ).draggable(
						{
						}
					)
					.on( 'dragstart', function( event ) { log( 'dragstart' ); event.stopImmediatePropagation(); launchEvent( event.target, "dragstart" ); } )
					.on( 'dragend', function( event ) { log( 'dragend' ); launchEvent( event.target, "dragend" ); } )
					.on( 'click', function( event ) { log( '-->click' );event.stopImmediatePropagation();event.stopPropagation(); } )
					;
				]]>
			</DraggableSetter>
			<DroppableSetter>
				<![CDATA[
				var element = getElement( "%Id%" );
//				element.setAttribute( "ondragover", "event.preventDefault();" );
				if ( false )
					interact( element ).dropzone(
						{
						}
					)
					.on( 'drop', function( event ) { log( 'drop : ' + event.target.id + " ; " + event.relatedTarget.id ); launchEvent( event.target, "drop" );} );
				]]>
			</DroppableSetter>
			<Fetcher>
			</Fetcher>
			<Setter>
				<EventHandlers>
					<![CDATA[
					setEventHandlers( %Ids_%, %Events_% );
				]]>
				</EventHandlers>
				<Contents>
					<![CDATA[
					setContents( %Ids_%, %Contents_% );
				]]>
				</Contents>
				<Timeout>
					<![CDATA[
					setTimeout( (digest) => launchEvent(digest), %Delay%, "|TIMEOUT|timeout||((%Action%))" );
				]]>
				</Timeout>
			</Setter>
			<WidgetsInstantiator>
				<![CDATA[
					instantiateWidgets( %Ids_%, %Types_%, %ParametersSets_% );
				]]>
			</WidgetsInstantiator>
			<!--<EventHandler>
				<![CDATA[
//						getElement( "%Id%" ).setAttribute( "on%Event%", "handleEvent( event );" );	// Seems not to work under 'CEF'.
//						getElement( "%Id%" ).on%Event%=handleEvent;
						getElement( "%Id%" ).addEventListener( "%Event%", handleEvent );
					]]>
			</EventHandler>-->
			<Focuser>
				<![CDATA[
						getElement( "%Id%" ).focus();
					]]>
			</Focuser>
			<Selector>
				<![CDATA[
						getElement( "%Id%" ).select();
					]]>
			</Selector>
			<Log>
				<![CDATA[
						log( "%Message%" );
					]]>
			</Log>
			<Property>
				<Getter>
					<![CDATA[
							getElement( "%Id%" ).%Name_%;
						]]>
				</Getter>
				<Setter>
					<![CDATA[
							getElement( "%Id%" ).%Name_% = %Value_%;
						]]>
				</Setter>
			</Property>
			<Widget>
				<ValueRetriever>
					<![CDATA[
							jQuery( getElement( "%Id%") ).%Method_%
						]]>
				</ValueRetriever>
				<Focuser>
					<![CDATA[
							jQuery( getElement( "%Id%") ).%Method_%
						]]>
				</Focuser>
				<Selector>
					<![CDATA[
							jQuery( getElement( "%Id%") ).%Method_%
						]]>
				</Selector>
				<Fetcher>
					<![CDATA[
					var digest = fetchWidgets( "%Id%" );
					digest;
				]]>
				</Fetcher>
			</Widget>
			<CSSRule>
				<Insert>
					<![CDATA[
							insertCSSRule( "%Id", "%Rule%", %Index% );
						]]>
				</Insert>
				<Append>
					<![CDATA[
							insertCSSRule( "%Id", "%Rule%", -1 ).toString();
						]]>
				</Append>
				<Remove>
					<![CDATA[
							removeCSSRule( "%Id", %Index% );
						]]>
				</Remove>
			</CSSRule>
			<Classes>
				<Add>
					<![CDATA[
							addClasses( %Ids_%, %Classes_% );
						]]>
				</Add>
				<Remove>
					<![CDATA[
							removeClasses( %Ids_%, %Classes_% );
						]]>
				</Remove>
				<Toggle>
					<![CDATA[
							toggleClasses( %Ids_% , %Classes_% );
						]]>
				</Toggle>
			</Classes>
			<Elements>
				<Enable>
					<![CDATA[
							enableElements( %Ids_% );
						]]>
				</Enable>
				<Disable>
					<![CDATA[
							disableElements( %Ids_% );
						]]>
				</Disable>
			</Elements>
		</OldScripts>
	</Definitions>
</xpp:bloc>
