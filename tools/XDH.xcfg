<?xml version="1.0" encoding="UTF-8"?>
<xpp:bloc xmlns:xpp="http://q37.info/ns/xpp">
  <!-- JS scripts related to XDHTML interfaces -->
  <xpp:expand href="../XDH.xcfg"/>
  <xpp:define name="XDHScripts">
    <xpp:bloc>
      <!-- All scripts enclosed in following block are of internal use. -->
      <xpp:bloc>
        <Script name="@SetEventHandlers_1" Arguments="_Ids,_Events">
          <![CDATA[
{
  setEventHandlers( %_Ids%, %_Events% );
}
        ]]>
        </Script>
        <Script name="@InstantiateWidgets_1" Arguments="_Ids,_Types,_ParametersSets,_ContentRetrievingMethods,_FocusingMethods,_SelectionMethods">
          <![CDATA[
{
  instantiateWidgets( %_Ids%, %_Types%, %_ParametersSets%, %_ContentRetrievingMethods%, %_FocusingMethods%, %_SelectionMethods% );
}
        ]]>
        </Script>
        <!-- This script does not perform the broadcast, but is the one which is broadcasted. -->
        <Script name="@BroadcastAction_1" Arguments="Action,Id">
          <![CDATA[
{
 launchEvent('%Id%|BROADCAST|broadcast||((broadcast|%Action%))');
}
		        ]]>
        </Script>
		<Script name="@Quit_1" Arguments="">%%Quit</Script>
      </xpp:bloc>
      <!-- All scripts enclosed in following block are public. -->
      <xpp:bloc>
        <Script name="RawSend_1" Arguments="_Data">
          <![CDATA[%_Data%]]>
        </Script>
        <Script name="Execute_1" Arguments="_Script">
          <![CDATA[
{
  %_Script%
}
        ]]>
        </Script>
        <Script name="Alert_1" Arguments="Message">
          <![CDATA[
{
  alert("%Message%");
  ""; // Must return a value, or one will not wait the dismissing of the dialog box.  
}
        ]]>
        </Script>
        <Script name="Confirm_1" Arguments="Message">
          <![CDATA[
{
  if ( window.confirm("%Message%") )
    "true";
  else
    "false";
}
        ]]>
        </Script>
        <!-- This script name (and only this one) and parameters are hadcoded in the 'XDHUJP' library ! -->
        <Script name="HandleLayout_1" Arguments="Variant,Id,XML,XSL">
          <![CDATA[
{
  let xml = "%XML%";	// 'XML' is HTML if 'XSL' is empty.
  let xsl = "%XSL%";
  let id = "%Id%";
  
  log("xml: " + xml);
  
  switch ( "%Variant%" ) {
  case 'Prepend':	// Deprecated
    prependLayout(id, xml, xsl);
    break;
  case 'Set':	// Deprecated
    setLayout(id, xml, xsl);
    break;
  case 'Append':	// Deprecated
    appendLayout(id, xml, xsl);
    break;
  default:
	if ( "%Variant%" === 'inner' )
		getElement(id).innerHTML = getLayoutHTML(xml, xsl);
	else
		getElement(id).insertAdjacentHTML("%Variant%", getLayoutHTML(xml, xsl));
  }

  var digests = fetchEventHandlersAndWidgets(getElement(id).parentElement);
  digests;  // Not returned to user. Splitted and given after processing to 'SetEnventHandlers_1' and  InstantiateWidgets_1' above internal scripts.
}
        ]]>
        </Script>
        <Script name="GetContents_1" Arguments="_Ids">
          <![CDATA[
{
  getContents(%_Ids%);
}
        ]]>
        </Script>
        <Script name="SetContents_1" Arguments="_Ids,_Contents">
          <![CDATA[
{
  setContents( %_Ids%, %_Contents% );
}
        ]]>
        </Script>
        <Script name="GetValues_1" Arguments="_Ids">
          <![CDATA[
{
  getValues(%_Ids%);
}
        ]]>
        </Script>
        <Script name="SetValues_1" Arguments="_Ids,_Values">
          <![CDATA[
{
  setValues( %_Ids%, %_Values% );
}
        ]]>
        </Script>
        <Script name="GetMarks_1" Arguments="_Ids">
          <![CDATA[
{
  getMarks(%_Ids%);
}
        ]]>
        </Script>
        <Script name="SetMarks_1" Arguments="_Ids,_Marks">
          <![CDATA[
{
  setMarks( %_Ids%, %_Marks% );
}
        ]]>
        </Script>
        <!-- Use broadcasting instead! -->
        <!--Script name="SetTimeout_1" Arguments="Delay,Action">
        <![CDATA[
{
  setTimeout( (digest) => launchEvent(digest), %Delay%, "|TIMEOUT|timeout||((%Action%))" );
  undefined; // 'setTimeout' returns a value which is discarded as not being awaited.
}
        ]]>
</Script-->
        <Script name="HandleClasses_1" Arguments="Variant,_Ids,_Classes">
          <![CDATA[
{
  switch ( "%Variant%" ) {
  case 'Add':
    addClasses(%_Ids%, %_Classes%);
    break;
  case 'Remove':
    removeClasses(%_Ids%, %_Classes%);
    break;
  case 'Toggle':
    toggleClasses(%_Ids%, %_Classes%);
    break;
  }
}
        ]]>
        </Script>
        <Script name="EnableElements_1" Arguments="_Ids">
          <![CDATA[
{
  enableElements( %_Ids% );
}
        ]]>
        </Script>
        <Script name="DisableElements_1" Arguments="_Ids">
          <![CDATA[
{
  disableElements( %_Ids% );
}
        ]]>
        </Script>
        <Script name="SetAttribute_1" Arguments="Id,Name,Value">
          <![CDATA[
{
  getElement( "%Id%" ).setAttribute("%Name%", "%Value%");
}
        ]]>
        </Script>
        <Script name="GetAttribute_1" Arguments="Id,Name">
          <![CDATA[
{
  getElement( "%Id%" ).getAttribute("%Name%");
}
        ]]>
        </Script>
        <Script name="RemoveAttribute_1" Arguments="Id,Name">
          <![CDATA[
{
  getElement( "%Id%" ).removeAttribute( "%Name%" );
}
        ]]>
        </Script>
        <Script name="SetProperty_1" Arguments="Id,_Name,_Value">
          <![CDATA[
{
  getElement( "%Id%" ).%_Name% = %_Value%;
}
        ]]>
        </Script>
        <Script name="GetProperty_1" Arguments="Id,_Name">
          <![CDATA[
{
  getElement( "%Id%" ).%_Name%;
}
        ]]>
        </Script>
        <Script name="Focus_1" Arguments="Id">
          <![CDATA[
{
  getElement( "%Id%" ).focus();
}
        ]]>
        </Script>
        <Script name="Parent_1" Arguments="Id">
          <![CDATA[
{
  getOrGenerateId( getElement( "%Id%" ).parentElement );
}
        ]]>
        </Script>
        <Script name="FirstChild_1" Arguments="Id">
          <![CDATA[
{
  getOrGenerateId(getElement("%Id%").firstElementChild);
}
        ]]>
        </Script>
        <Script name="LastChild_1" Arguments="Id">
          <![CDATA[
{
  getOrGenerateId(getElement("%Id%").lastElementChild);
}
        ]]>
        </Script>
        <Script name="PreviousSibling_1" Arguments="Id">
          <![CDATA[
{
  getOrGenerateId(getElement("%Id%").previousElementSibling);
}
        ]]>
        </Script>
        <Script name="NextSibling_1" Arguments="Id">
          <![CDATA[
{
  getOrGenerateId(getElement("%Id%").nextElementSibling);
}
        ]]>
        </Script>
        <Script name="ScrollTo_1" Arguments="Id">
          <![CDATA[
{
  getElement("%Id%").scrollIntoView({behavior: 'smooth', block: 'center'});
}
        ]]>
        </Script>
        <Script name="Flush_1" Arguments="">
          <![CDATA[
{
  ""; // To wait that all pending commands were executed.
}
        ]]>
        </Script>
        <Script name="DebugLog_1" Arguments="Switch">
          <![CDATA[
{
		var debugLog = %Switch%;
}
        ]]>
		</Script>
        <Script name="Log_1" Arguments="Message">
          <![CDATA[
{
		console.log("%Message%");
}
        ]]>
		</Script>	
        <Script name="" Arguments="">
          <![CDATA[
{

}
        ]]>
        </Script>
      </xpp:bloc>
    </xpp:bloc>
  </xpp:define>
  <xpp:define name="XDHTagsDefaultEvents">
    <!-- Default event for each HTML tags-->
    <xpp:bloc>
      <!-- Below one is the default event. -->
      <Tag name="" Event="click"/>
      <!-- For the 'INPUT' tag, 'name' contains the value of the 'type' attribute (uppercased). -->
      <Tag name="SELECT" Event="change"/>
      <Tag name="RANGE" Event="change"/>
      <Tag name="CHECKBOX" Event="change"/>
      <Tag name="RADIO" Event="change"/>
      <Tag name="DATE" Event="change"/>
      <Tag name="COLOR" Event="change"/>
      <Tag name="TEXT" Event="keypress" Key="Enter"/>
      <Tag name="PASSWORD" Event="keypress" Key="Enter"/>
      <Tag name="TEXTAREA" Event="keypress" Key="Enter"/>
    </xpp:bloc>
  </xpp:define>
  <xpp:define name="XDHScriptsEmbedded">
    <Scripts xpp:attribute="Version,XDHScriptsVersion">
      <xpp:expand select="XDHScripts"/>
    </Scripts>
  </xpp:define>
  <xpp:define name="XDHTagsDefaultEventsEmbedded">
	  <TagsDefaultEvents>
      <xpp:expand select="XDHTagsDefaultEvents"/>
    </TagsDefaultEvents>
  </xpp:define>
  <xpp:define name="XDHFull">
	<xpp:bloc>
	  <xpp:expand select="XDHScriptsEmbedded"/>
	  <xpp:expand select="XDHTagsDefaultEventsEmbedded"/>
	</xpp:bloc>
  </xpp:define>
</xpp:bloc>
